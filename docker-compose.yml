version: '3.8'


x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-extending_airflow:latest}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__SCHEDULER__DAGBAG_IMPORT_TIMEOUT: "1800"
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: "1800" # 60s * 30
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: "300" 
    
    SQLALCHEMY_POSTGRES_DB_URI: ${SQLALCHEMY_POSTGRES_DB_URI}
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB}
    POSTGRES_HOST: ${POSTGRES_HOST}
    POSTGRES_HTTP_PORT: ${POSTGRES_HTTP_PORT}

    DATA_FOLDER: "/opt/airflow/data/" # same as data folder in volumes
  volumes:
    - ./app/pipeline/dags:/opt/airflow/dags
    - ./app/pipeline/logs:/opt/airflow/logs
    - ./app/pipeline/plugins:/opt/airflow/plugins
    - ./app/data:/opt/airflow/data
    - ./app/etl:/opt/airflow/etl
    - ./app/src:/opt/airflow/src
    - ./app/config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:

  postgres:
    container_name: pg
    image: postgres
    build: ./docker/postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", '${POSTGRES_DB}']
      interval: 5s
      retries: 5
    restart: always
    ports:
      - ${POSTGRES_HTTP_PORT}:${POSTGRES_HTTP_PORT}
    networks:
      - lan

  pgadmin:
      container_name: pgadmin4
      image: dpage/pgadmin4
      restart: always
      environment:
        - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
        - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      ports:
        - ${PGADMIN_HTTP_PORT}:80
      networks:
        - lan
      depends_on:
        postgres:
          condition: service_healthy
  
  notebook:
      container_name: notebook
      build:
        context: .
        dockerfile: ./docker/notebook/Dockerfile
      volumes:
        - ./app:/home/app
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_HTTP_PORT=${POSTGRES_HTTP_PORT}
      ports:
        - ${NOTEBOOK_HTTP_PORT}:${NOTEBOOK_HTTP_PORT}
      networks:
        - lan
  

  tests:
    container_name: tests
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./docker/tests/Dockerfile
    volumes:
      - ./app:/app
    command: pytest --color=yes -v

  
  postgres-airflow:
    container_name: postgres-airflow
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AIRFLOW}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AIRFLOW}
      POSTGRES_DB: ${POSTGRES_DB_AIRFLOW}
    volumes:
      - postgres-airflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - lan


  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - lan


  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://${LOCALHOST_IP}:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - lan


  flower:
    <<: *airflow-common
    container_name: flower
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://${LOCALHOST_IP}:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


volumes:
  postgres-airflow-db-volume:


networks:
  lan:
